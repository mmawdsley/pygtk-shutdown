#!/usr/bin/env python2
# -*- coding: utf-8 -*-

# pygtk-shutdown - logout/reboot/shutdown your computer with an
# easy-to-use dialog, with minimal dependencies
# Version: 1.0
# Copyright (C) 2011 doorknob60 <doorknob60 at gmail dot com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import pygtk
pygtk.require ("2.0")
import gtk
import os
import subprocess
import ConfigParser

class Shutdown_Dialog:

  def __init__ (self):

    self.config_uri = os.path.expanduser ("~/.pygtk-shutdown")
    self.window = None
    self.frame = None
    self.buttons_box = None
    self.lock_button = None
    self.cancel_button = None
    self.halt_button = None
    self.logout_button = None
    self.restart_button = None
    self.sleep_button = None
    self.hibernate_button = None
    self.show_cancel = True
    self.vertical = False
    self.lock_command = ""
    self.logout_command = ""
    self.sleep_command = ""
    self.hibernate_command = ""
    self.resume_command = ""
    self.halt_command = ""
    self.restart_command = ""


  def main (self):
    """Creates the dialog"""

    self.get_config ()

    iconsize = gtk.icon_size_register ("48x48", 48, 48)

    self.window = gtk.Window ()
    self.window.set_modal (True)
    self.window.set_decorated (False)
    self.window.set_keep_above (True)
    self.window.connect ("key_press_event", self.on_key_press)
    self.frame = gtk.Frame ()

    if self.vertical == True:
      self.buttons_box = gtk.VBox (True)
    else:
      self.buttons_box = gtk.HBox (True)

    if self.show_cancel == True:
      self.cancel_button = gtk.Button ("Cancel")
      ico = gtk.Image ()
      ico.set_from_icon_name ("dialog-cancel", iconsize)
      self.cancel_button.set_image (ico)
      self.buttons_box.pack_start (self.cancel_button)
      self.cancel_button.connect ("clicked", self.close)

    if len (self.lock_command) > 0:
      self.lock_button = gtk.Button ("Lock")
      ico = gtk.Image ()
      ico.set_from_icon_name ("gnome-lockscreen", iconsize)
      self.lock_button.set_image (ico)
      self.buttons_box.pack_start (self.lock_button)
      self.lock_button.connect ("clicked", self.lock)

    if len (self.logout_command) > 0:
      self.logout_button = gtk.Button ("Logout")
      ico = gtk.Image ()
      ico.set_from_icon_name ("gnome-session-logout", iconsize)
      self.logout_button.set_image (ico)
      self.buttons_box.pack_start (self.logout_button)
      self.logout_button.connect ("clicked", self.logout)

    if len (self.restart_command) > 0:
      self.restart_button = gtk.Button ("Restart")
      ico = gtk.Image ()
      ico.set_from_icon_name ("gnome-session-reboot", iconsize)
      self.restart_button.set_image (ico)
      self.buttons_box.pack_start (self.restart_button)
      self.restart_button.connect ("clicked", self.restart)

    if len (self.halt_command) > 0:
      self.halt_button = gtk.Button ("Shutdown")
      ico = gtk.Image ()
      ico.set_from_icon_name ("gnome-session-halt", iconsize)
      self.halt_button.set_image (ico)
      self.buttons_box.pack_start (self.halt_button)
      self.halt_button.connect ("clicked", self.shutdown)

    if len (self.sleep_command) > 0:
      self.sleep_button = gtk.Button ("Sleep")
      ico = gtk.Image ()
      ico.set_from_icon_name ("gnome-session-sleep", iconsize)
      self.sleep_button.set_image (ico)
      self.buttons_box.pack_start (self.sleep_button)
      self.sleep_button.connect ("clicked", self.sleep)

    if len (self.hibernate_command) > 0:
      self.hibernate_button = gtk.Button ("Hibernate")
      ico = gtk.Image ()
      ico.set_from_icon_name ("gnome-session-hibernate", iconsize)
      self.hibernate_button.set_image (ico)
      self.buttons_box.pack_start (self.hibernate_button)
      self.hibernate_button.connect ("clicked", self.hibernate)

    self.frame.add (self.buttons_box)

    self.window.add (self.frame)
    self.window.show_all ()
    self.window.set_gravity (gtk.gdk.GRAVITY_NORTH_WEST)
    self.window.connect ("delete_event", self.close)

    gtk.main ()


  def get_config (self):
    """Loads in the configuration options"""

    config = ConfigParser.ConfigParser ()
    config.read (self.config_uri)

    options = [
      "show_cancel", "vertical", "lock_command", "logout_command",
      "sleep_command", "hibernate_command", "halt_command",
      "restart_command", "resume_command"
    ]

    for option in options:

      if config.has_option ("config", option) == False:
        continue

      option_type = type (getattr (self, option))

      if option_type == bool:
        option_value = config.getboolean ("config", option)
      else:
        option_value = config.get ("config", option)

      setattr (self, option, option_value)


  def close (self, widget = None, data = None):
    """Closes the dialog"""

    self.window.hide ()
    gtk.main_quit ()

    while gtk.events_pending ():
      gtk.main_iteration (False)


  def lock (self, widget = None, data = None):
    """Locks the session"""

    self.run_command (self.lock_command)


  def logout (self, widget = None, data = None):
    """Closes the session"""

    self.run_command (self.logout_command)


  def shutdown (self, widget = None, data = None):
    """Shuts down the computer"""

    self.run_command (self.halt_command)


  def restart (self, widget = None, data = None):
    """Restarts the computer"""

    self.run_command (self.restart_command)


  def sleep (self, widget = None, data = None):
    """Sleeps the computer"""

    self.run_command (self.sleep_command)
    self.resume ()


  def hibernate (self, widget = None, data = None):
    """Hibernates the computer"""

    self.run_command (self.hibernate_command)
    self.resume ()


  def resume (self):
    """Runs the resume command"""

    if len (self.resume_command) > 0:
      self.run_command (self.resume_command)


  def focus_next (self):
    """Focuses the next button"""

    self.buttons_box.child_focus (gtk.DIR_TAB_FORWARD)


  def focus_previous (self):
    """Focuses the previous button"""

    self.buttons_box.child_focus (gtk.DIR_TAB_BACKWARD)


  def focus_first (self):
    """Focuses the first button"""

    try:
      self.buttons_box.get_children ()[0].grab_focus ()
    except IndexError:
      pass


  def focus_last (self):
    """Focuses the last button"""

    try:
      self.buttons_box.get_children ()[-1].grab_focus ()
    except IndexError:
      pass


  def on_key_press (self, widget, event):
    """Handles key-press events"""

    keyname = gtk.gdk.keyval_name (event.keyval)

    if (event.state & gtk.gdk.CONTROL_MASK and keyname == "g") or keyname == "Escape":
      self.close ()
    elif event.state & gtk.gdk.CONTROL_MASK and (keyname == "n" or keyname == "f"):
      self.focus_next ()
    elif event.state & gtk.gdk.CONTROL_MASK and (keyname == "p" or keyname == "b"):
      self.focus_previous ()
    elif event.state & gtk.gdk.CONTROL_MASK and keyname == "a":
      self.focus_first ()
    elif event.state & gtk.gdk.CONTROL_MASK and keyname == "e":
      self.focus_last ()
    elif keyname == "Home":
      self.focus_first ()
    elif keyname == "End":
      self.focus_last ()


  def hide (self):
    """Hides the window"""

    self.window.hide ()


  def run_command (self, command):
    """Runs the given command and stores the process for later"""

    self.close ()
    subprocess.call (command, shell=True)


if __name__ == "__main__":

  dialog = Shutdown_Dialog ()
  dialog.main ()
