#!/usr/bin/env python2
# -*- coding: utf-8 -*-

# pygtk-shutdown - logout/reboot/shutdown your computer with an
# easy-to-use dialog, with minimal dependencies
# Version: 1.0
# Copyright (C) 2011 doorknob60 <doorknob60 at gmail dot com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import pygtk
pygtk.require ("2.0")
import gtk
import os
import subprocess
import ConfigParser
from threading import Thread

class Shutdown_Dialog:

  def __init__ (self):

    self._config_uri = os.path.expanduser ("~/.pygtk-shutdown")
    self._window = None
    self._buttons_box = None
    self._lock_button = None
    self._cancel_button = None
    self._halt_button = None
    self._logout_button = None
    self._restart_button = None
    self._sleep_button = None
    self._hibernate_button = None
    self._threads = []
    self._config = {
      "show_cancel" : True,
      "vertical" : False,
      "lock_command" : "",
      "logout_command" : "",
      "sleep_command" : "",
      "hibernate_command" : "",
      "halt_command" : "",
      "restart_command" : "",
      "resume_command" : ""
    }


  def main (self):
    """Creates the dialog"""

    self._get_config ()

    iconsize = gtk.icon_size_register ("48x48", 48, 48)

    self._window = gtk.Window ()
    self._window.set_modal (True)
    self._window.set_decorated (False)
    self._window.set_keep_above (True)
    self._window.connect ("key_press_event", self._on_key_press)


    if self._config["vertical"] == True:
      self._buttons_box = gtk.VBox (True)
    else:
      self._buttons_box = gtk.HBox (True)

    if self._config["show_cancel"] == True:
      self._cancel_button = gtk.Button ("Cancel")
      ico = gtk.Image ()
      ico.set_from_icon_name ("dialog-cancel", iconsize)
      self._cancel_button.set_image (ico)
      self._buttons_box.pack_start (self._cancel_button)
      self._cancel_button.connect ("clicked", self.close)

    if len (self._config["lock_command"]) > 0:
      self._lock_button = gtk.Button ("Lock")
      ico = gtk.Image ()
      ico.set_from_icon_name ("gnome-lockscreen", iconsize)
      self._lock_button.set_image (ico)
      self._buttons_box.pack_start (self._lock_button)
      self._lock_button.connect ("clicked", self.lock)

    if len (self._config["logout_command"]) > 0:
      self._logout_button = gtk.Button ("Logout")
      ico = gtk.Image ()
      ico.set_from_icon_name ("gnome-session-logout", iconsize)
      self._logout_button.set_image (ico)
      self._buttons_box.pack_start (self._logout_button)
      self._logout_button.connect ("clicked", self.logout)

    if len (self._config["restart_command"]) > 0:
      self._restart_button = gtk.Button ("Restart")
      ico = gtk.Image ()
      ico.set_from_icon_name ("gnome-session-reboot", iconsize)
      self._restart_button.set_image (ico)
      self._buttons_box.pack_start (self._restart_button)
      self._restart_button.connect ("clicked", self.restart)

    if len (self._config["halt_command"]) > 0:
      self._halt_button = gtk.Button ("Shutdown")
      ico = gtk.Image ()
      ico.set_from_icon_name ("gnome-session-halt", iconsize)
      self._halt_button.set_image (ico)
      self._buttons_box.pack_start (self._halt_button)
      self._halt_button.connect ("clicked", self.shutdown)

    if len (self._config["sleep_command"]) > 0:
      self._sleep_button = gtk.Button ("Sleep")
      ico = gtk.Image ()
      ico.set_from_icon_name ("gnome-session-sleep", iconsize)
      self._sleep_button.set_image (ico)
      self._buttons_box.pack_start (self._sleep_button)
      self._sleep_button.connect ("clicked", self.sleep)

    if len (self._config["hibernate_command"]) > 0:
      self._hibernate_button = gtk.Button ("Hibernate")
      ico = gtk.Image ()
      ico.set_from_icon_name ("gnome-session-hibernate", iconsize)
      self._hibernate_button.set_image (ico)
      self._buttons_box.pack_start (self._hibernate_button)
      self._hibernate_button.connect ("clicked", self.hibernate)

    frame = gtk.Frame ()
    frame.add (self._buttons_box)

    self._window.add (frame)
    self._window.show_all ()
    self._window.set_gravity (gtk.gdk.GRAVITY_NORTH_WEST)
    self._window.connect ("delete_event", self.close)

    gtk.main ()


  def close (self, widget = None, data = None):
    """Closes the dialog"""

    self._window.hide ()

    gtk.main_quit ()

    while gtk.events_pending ():
      gtk.main_iteration (False)


  def lock (self, widget = None, data = None):
    """Locks the session"""

    self.close ()
    self._run (self._config["lock_command"])
    self._wait ()


  def logout (self, widget = None, data = None):
    """Closes the session"""

    self.close ()
    self._run (self._config["logout_command"])
    self._wait ()


  def shutdown (self, widget = None, data = None):
    """Shuts down the computer"""

    self.close ()
    self._run (self._config["halt_command"])


  def restart (self, widget = None, data = None):
    """Restarts the computer"""

    self.close ()
    self._run (self._config["restart_command"])


  def sleep (self, widget = None, data = None):
    """Sleeps the computer"""

    self.close ()

    self._run (self._config["lock_command"])
    self._run (self._config["sleep_command"], self._config["resume_command"])

    self._wait ()


  def hibernate (self, widget = None, data = None):
    """Hibernates the computer"""

    self.close ()

    self._run (self._config["hibernate_command"])
    self._run (self._config["resume_command"])

    self._wait ()


  def resume (self):
    """Runs the resume command"""

    self._run (self._config["resume_command"])


  def _get_config (self):
    """Loads in the configuration options"""

    config = ConfigParser.ConfigParser ()
    config.read (self._config_uri)

    for option in self._config:

      if config.has_option ("config", option) == False:
        continue

      if type (self._config[option]) == bool:
        self._config[option] = config.getboolean ("config", option)
      else:
        self._config[option] = config.get ("config", option)


  def _wait (self):
    """Waits for the threads to finish"""

    for thread in self._threads:
      thread.join ()


  def _focus_next (self):
    """Focuses the next button"""

    self._buttons_box.child_focus (gtk.DIR_TAB_FORWARD)


  def _focus_previous (self):
    """Focuses the previous button"""

    self._buttons_box.child_focus (gtk.DIR_TAB_BACKWARD)


  def _focus_first (self):
    """Focuses the first button"""

    try:
      self._buttons_box.get_children ()[0].grab_focus ()
    except IndexError:
      pass


  def _focus_last (self):
    """Focuses the last button"""

    try:
      self._buttons_box.get_children ()[-1].grab_focus ()
    except IndexError:
      pass


  def _on_key_press (self, widget, event):
    """Handles key-press events"""

    keyname = gtk.gdk.keyval_name (event.keyval)

    if (event.state & gtk.gdk.CONTROL_MASK and keyname == "g") or keyname == "Escape":
      self.close ()
    elif event.state & gtk.gdk.CONTROL_MASK and (keyname == "n" or keyname == "f"):
      self._focus_next ()
    elif event.state & gtk.gdk.CONTROL_MASK and (keyname == "p" or keyname == "b"):
      self._focus_previous ()
    elif event.state & gtk.gdk.CONTROL_MASK and keyname == "a":
      self._focus_first ()
    elif event.state & gtk.gdk.CONTROL_MASK and keyname == "e":
      self._focus_last ()
    elif keyname == "Home":
      self._focus_first ()
    elif keyname == "End":
      self._focus_last ()


  def _run (self, *commands):
    """Runs the given commands in a thread"""

    t = Thread (None, self._command_thread, None, [commands])
    t.start ()

    self._threads.append (t)


  def _command_thread (self, commands):
    """Runs the commands one after the other"""

    for command in commands:

      if len (command) > 0:
        subprocess.call (command, shell=True)


if __name__ == "__main__":

  dialog = Shutdown_Dialog ()
  dialog.main ()
